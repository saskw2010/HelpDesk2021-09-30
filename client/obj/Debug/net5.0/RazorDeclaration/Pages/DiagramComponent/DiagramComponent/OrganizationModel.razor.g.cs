// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Testauth.Client.Pages.DiagramComponent.DiagramComponent
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\RadZenstock\authentication\client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\RadZenstock\authentication\client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\RadZenstock\authentication\client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\RadZenstock\authentication\client\_Imports.razor"
using Testauth.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\RadZenstock\authentication\client\_Imports.razor"
using Testauth.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\RadZenstock\authentication\client\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\RadZenstock\authentication\client\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\RadZenstock\authentication\client\Pages\DiagramComponent\DiagramComponent\OrganizationModel.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\RadZenstock\authentication\client\Pages\DiagramComponent\DiagramComponent\OrganizationModel.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\RadZenstock\authentication\client\Pages\DiagramComponent\DiagramComponent\OrganizationModel.razor"
using Syncfusion.Blazor.Diagram;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\RadZenstock\authentication\client\Pages\DiagramComponent\DiagramComponent\OrganizationModel.razor"
using Syncfusion.Blazor.Diagram.Internal;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/diagramcomponent/organization-model")]
    public partial class OrganizationModel : SampleBaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 200 "E:\RadZenstock\authentication\client\Pages\DiagramComponent\DiagramComponent\OrganizationModel.razor"
     
    public int? HValue { get; set; } = 30;
    public int? VValue { get; set; } = 30;
    SubTreeOrientation subTreeOrientation = SubTreeOrientation.Vertical;
    SubTreeAlignments subTreeAlignment = SubTreeAlignments.Right;
    LayoutOrientation orientation = LayoutOrientation.TopToBottom;
    LayoutType type = LayoutType.OrganizationalChart;
    HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;
    VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
    int HorizontalSpacing = 30;
    int VerticalSpacing = 30;
    double top = 50;
    double bottom = 50;
    double right = 50;
    double left = 50;
    double offset = 20;
    static string selecteditem = "image-pattern-style  e-selected-orientation-style";
    static string unselecteditem = "image-pattern-style";
    static string selectedPattenitem = "image-pattern-style  e-selected-pattern-style";
    Dictionary<string, string> dict = new Dictionary<string, string>() {
        { "topToBottom", selecteditem },
        { "bottomToTop", unselecteditem },
        { "leftToRight", unselecteditem },
        { "rightToLeft", unselecteditem }
    };
    Dictionary<string, string> pattendict = new Dictionary<string, string>() {
       { "pattern1", unselecteditem },
       { "pattern2", unselecteditem },
       { "pattern3", unselecteditem },
       { "pattern4", unselecteditem },
       { "pattern5", selectedPattenitem },
       { "pattern6", unselecteditem },
       { "pattern7", unselecteditem },
       { "pattern8", unselecteditem },
       { "pattern9", unselecteditem },
    };

    SfDiagramComponent Diagram;
    // Defines default values for Node object
    private void NodeDefaults(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node.Data is System.Text.Json.JsonElement)
        {
            node.Data = System.Text.Json.JsonSerializer.Deserialize<OrganizationalDetails>(node.Data.ToString());
        }
        OrganizationalDetails organizationData = node.Data as OrganizationalDetails;
        node.Width = 120;
        node.Height = 50;
        node.Style.Fill = organizationData.Color;
        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
    {
                new ShapeAnnotation()
                {
                    Content = organizationData.Role,
                    Offset = new Point(0.5, 0.5),
                    Style = new TextShapeStyle() { Color = "white" }
                }
            };
    }
    // Defines default values for Connector object
    private void ConnectorDefaults(IDiagramObject connector)
    {
        (connector as Connector).Type = Segments.Orthogonal;
        (connector as Connector).TargetDecorator.Shape = DecoratorShapes.None;
        (connector as Connector).SourceDecorator.Shape = DecoratorShapes.None;
    }

    public class OrganizationalDetails
    {
        public string Id { get; set; }
        public string Role { get; set; }
        public string Color { get; set; }
        public string Manager { get; set; }
        public string ChartType { get; set; }


    }
    //DataSource Items.
    public List<OrganizationalDetails> DataSource = new List<OrganizationalDetails>()
{
        new OrganizationalDetails(){Id= "parent", Role= "Board", Color = "#71AF17", Manager = "",ChartType = "" },
        new OrganizationalDetails() { Id = "1",Role=  "General manager", Color = "#71AF17", Manager =  "parent", ChartType ="right"},
        new OrganizationalDetails() { Id = "11", Role= "Assistant general manager",Color =  "#71AF17", Manager =  "1",ChartType = ""},
        new OrganizationalDetails() { Id = "2", Role= "Human resource manager", Color = "#1859B7", Manager =  "1",ChartType = "right"},
        new OrganizationalDetails() { Id = "3", Role= "Trainers", Color = "#2E95D8",  Manager = "2", ChartType =""},
        new OrganizationalDetails() { Id = "4", Role= "Recruiting team",Color =  "#2E95D8", Manager =  "2",ChartType = ""},
        new OrganizationalDetails() { Id = "5", Role= "Finance asst. manager", Color = "#2E95D8", Manager =  "2", ChartType =""},
        new OrganizationalDetails() { Id = "6", Role= "Design manager", Color = "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "7",Role=  "Design supervisor",Color =  "#2E95D8",  Manager = "6", ChartType =""},
        new OrganizationalDetails() { Id = "8",Role=  "Development supervisor",Color =  "#2E95D8", Manager =  "6",ChartType = ""},
        new OrganizationalDetails() { Id = "9",Role=  "Drafting supervisor", Color = "#2E95D8",  Manager = "6",ChartType = ""},
        new OrganizationalDetails() { Id = "10",Role=  "Operations manager",Color =  "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "11",Role=  "Statistics department",Color =  "#2E95D8",  Manager = "10",ChartType = ""},
        new OrganizationalDetails() { Id = "12",Role=  "Logistics department",Color =  "#2E95D8", Manager =  "10", ChartType =""},
        new OrganizationalDetails() { Id = "16", Role=  "Logistics department", Color = "#1859B7", Manager =  "1", ChartType ="right"},
        new OrganizationalDetails() { Id = "17",Role=  "Overseas sales manager",Color =  "#2E95D8", Manager =  "16", ChartType =""},
        new OrganizationalDetails() { Id = "18", Role= "Petroleum manager", Color = "#2E95D8",  Manager = "16", ChartType =""},
        new OrganizationalDetails() { Id = "20",Role=  "Service department manager",Color =  "#2E95D8",  Manager = "16",ChartType = ""},
        new OrganizationalDetails() { Id = "21", Role= "Quality control department", Color = "#2E95D8",  Manager = "16", ChartType =""},

    };
    private int rows = 0;
    private string pattern;
    private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
    {
        if (rows == 0)
        {
            if (rows == 0 && options.Rows != null)
                options.Rows = null;
            Node node = obj as Node;
            if (pattern == "Pattern3Click" || pattern == "Pattern4Click")
            {
                options.Offset = -50;
            }
            if ((node.Data as OrganizationalDetails).Role == "General manager")
            {
                options.Assistants.Add(options.Children[0]);
                options.Children.RemoveAt(0);
            }
            if (!options.HasSubTree)
            {
                options.Orientation = subTreeOrientation;
                options.Type = subTreeAlignment;
            }
        }
        else
        {
            if (!options.HasSubTree)
            {
                options.Type = subTreeAlignment;
                options.Orientation = subTreeOrientation;
                options.Offset = offset;
            }
        }
        return options;
    }

    public void LeftToRight()
    {
        orientation = LayoutOrientation.LeftToRight;
    }

    public class ImageFields
    {
        public string Text { get; set; }
    }


    private void HSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        HValue = (int)args.Value;
        HorizontalSpacing = int.Parse(args.Value.ToString());

    }
    private void VSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        VValue = (int)args.Value;
        VerticalSpacing = int.Parse(args.Value.ToString());
    }

    private void ToptoBottomClick()
    {
        orientation = LayoutOrientation.TopToBottom;
        updateSelection("topToBottom");
    }
    private void LefttoRightClick()
    {
        orientation = LayoutOrientation.LeftToRight;
        updateSelection("leftToRight");
    }
    private void RighttoLeftClick()
    {
        orientation = LayoutOrientation.RightToLeft;
        updateSelection("rightToLeft");
    }
    private void BottomtoTopClick()
    {
        orientation = LayoutOrientation.BottomToTop;
        updateSelection("bottomToTop");
    }
    private async Task Pattern1Click()
    {
        pattern = "Pattern1Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Alternate;
        subTreeOrientation = SubTreeOrientation.Vertical;
        offset = 20;
        updatePatternSelection("pattern1");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern2Click()
    {
        pattern = "Pattern2Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Left;
        subTreeOrientation = SubTreeOrientation.Vertical;
        offset = 20;
        updatePatternSelection("pattern2");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern3Click()
    {
        pattern = "Pattern3Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Left;
        subTreeOrientation = SubTreeOrientation.Vertical;
        offset = -50;
        updatePatternSelection("pattern3");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern4Click()
    {
        pattern = "Pattern4Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Right;
        subTreeOrientation = SubTreeOrientation.Vertical;
        offset = -50;
        updatePatternSelection("pattern4");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern5Click()
    {
        pattern = "Pattern5Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Right;
        subTreeOrientation = SubTreeOrientation.Vertical;
        offset = 20;
        updatePatternSelection("pattern5");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern6Click()
    {
        pattern = "Pattern6Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Balanced;
        subTreeOrientation = SubTreeOrientation.Horizontal;
        offset = 20;
        updatePatternSelection("pattern6");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern7Click()
    {
        pattern = "Pattern7Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Center;
        subTreeOrientation = SubTreeOrientation.Horizontal;
        offset = -50;
        updatePatternSelection("pattern7");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern8Click()
    {
        pattern = "Pattern8Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Left;
        subTreeOrientation = SubTreeOrientation.Horizontal;
        offset = 20;
        updatePatternSelection("pattern8");
        _ = Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private async Task Pattern9Click()
    {
        pattern = "Pattern9Click";
        Diagram.BeginUpdate();
        subTreeAlignment = SubTreeAlignments.Right;
        subTreeOrientation = SubTreeOrientation.Horizontal;
        offset = 20;
        updatePatternSelection("pattern9");
        await Diagram.EndUpdate();
        await Diagram.DoLayout();
    }
    private void updatePatternSelection(string id)
    {
        for (int i = 0; i < pattendict.Count; i++)
        {
            var value = pattendict.Values.ElementAt(i);
            var key = pattendict.Keys.ElementAt(i);
            if (pattendict.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            pattendict.Remove(key);
            pattendict.Add(key, value);
        }
    }
    //Method is used to apply the selection to the prroperty panel.
    private void updateSelection(string id)
    {
        for (int i = 0; i < dict.Count; i++)
        {
            var value = dict.Values.ElementAt(i);
            var key = dict.Keys.ElementAt(i);
            if (dict.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            dict.Remove(key);
            dict.Add(key, value);
        }
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
